A transcript format for the Atlantis board game.

Design goals
------------

The file format should be:
 - human editable:
    - human readable/writable
    - reasonably concise
    - syntactically and semantically intuitive
 - computer editable:
    - completely and unambiguously specified
    - efficiently parsable
 - non-redundant (since needless redundancy may cause inconsistency)
 - flexible; it should be possible to describe:
    - arbitrary board shapes (but limited to the hexagonal grid)
    - arbitrary segment shapes
    - starting boards (without players)
    - intermediate states (with growing points)
    - unfinished games


Game description
----------------

The game of Atlantis is played on fields which lie on a hexagonal grid and are
partitioned into disjoint segments.  Traditonally, all segments consist of
seven fields arranged in a hexagonal shape.

Fields are identified using two axes on the grid. The first axis is numbered
with lower-case letters: a=1, z=26, aa=27, az=52, ba=53, zz=702, aaa=703, et
cetera (although very high values are rarely needed). The second axis is
numbered with positive integers: 1, 2, 3, et cetera.

An example coordinate sytem (with three conventional segments):

                                           +---+
                                          /     \
                       +---+         +---+  f5   +---+
                      /     \       /     \     /     \
                 +---+   d6  +---+ +  e5   +---+  f4   +
                /     \     /     \ \     /     \     /
               +  c6   +---+  d5   + +---+  e4   +---+   .
                \     /     \     / /     \     /     \     .
             .   +---+  c5   +---+ +  d4   +---+  e3   +       .
          .     /     \     /     \ \     /     \     /           .
       .       +  b5   +---+  c4   + +---+  d3   +---+   .           .
    .           \     /     \     / +---+ \     /           .           .
 6           .   +---+  b4   +---+ /     \ +---+   .           .           f
          .           \     / +---+  c3   +---+       .           .
       5           .   +---+ /     \     /     \         .           e
                .           +  b3   +---+  c2   +           .
             4               \     /     \     /               d
                         .    +---+  b2   +---+   .
                      .      /     \     /     \     .
                   3        +  a2   +---+  b1   +       c
                             \     /     \     /
                          2   +---+  a1   +---+   b
                                   \     /
                                1   +---+   a

Fields on the board can be in one of three states:
    1. open
    2. growing
    3. dead
A field which is not dead may contain stones of a single player.  Players can
move stones over and on top of open fields only; i.e. stones on growing field
cannot be manipulated by players directly.  Dead fields are always empty, and
practically indistinguishable from non-existent fields.

The game of Atlantis is played in rounds.  Every round, each player takes a turn
(in the order in which players are declared).  Each turn consists of three
phases:
  1. movement
  2. explosion
  3. growth
The player only makes decisions during the movement phase; the other two phases
are fully deterministic.


Ad 1. movement phase:

During the movement phase, the player may make any number of moves (including
none at all).  A move consists of taking a number of his stones from a single
field and moving them in one of the six cardinal directions by a number of steps
exactly equal to the number of stones moved.  It's not allowed to change
directions during a move.  It is allowed to move only part of the stones from a
field.

All fields visited in a move (the source field, the destination field, and all
intermediate fields) must be open; it is not allowed to move over or unto
growing or dead fields.

If any of the fields visited contain stones controlled by the opponent, then
the player must eliminate them by removing one of his own stones for every
stone of an opponent.  Whatever remains of the moved stones is added to the
destination field.

A player is allowed to make at most one move from each segment (but multiple
moves onto the same segment are allowed).  Additionally, each stone may be
involved in at most one move (even if it was moved to a different segment).


Ad 2. explosion phase:

After a player's movement phase, each field that contains a number of his
stones equal to or exceeding the number of adjacent open fields will explode.

When a field explodes, all stones are removed from it, and one stone will be
added to each of the adjacent fields.  As in the movement phase, if the
adjacent field contains opponent's stones, then one of them is removed instead.

If the exploded field contained more stones than there are adjacent open fields,
any excess stones are removed from the game (the exploded field always ends up
empty).

After an open field has exploded, it becomes a growing field.  After a growing
field has exploded, it becomes a dead field.  Note that growing fields may
explode, but they don't count as adjacent fields, and they don't receive any
stones from neighbouring fields when they explode.

The explosion of one field may cause another field to explode (either by
increasing the number of stones on the field, or decreasing the number of open
neighbours, or both).  Such chain reactions are common, and the explosion
phase continues until no fields remain that contain more stones than they have
open neighbours.  Note that this applies to the current player only: fields
which contain opponent's stones will not explode until the explosion phase of
that opponent's turn.

Note that the order in which explosions are executed doesn't affect the final
outcome, so explosions may be executed in any order, as long as the explosion
phase continues until all fields are settled.


Ad 3. growth phase:

Each of the player's growing fields (i.e. those that already contain some of the
player's stones, as well as all newly created, still-empty growing fields) will
gain an additional stone of the player's color.


Objective and end of the game:

The goal of the game is to control as many fields in stable areas as possible.
An area of the board is any maximal set of open fields such that all fields are
directly or indirectly connected; an area is stable if it is not adjacent to any
growing fields and contains stones from at most one player.

The game continues until all remaining open fields are in stable areas.  It is
possible for stable areas to arise that do not contain any stones; those areas
don't count towards any player's score.

Tie breaking rule: if multiple players have equal scores, they will be ranked
in reverse order of moving (since moving first affords an advantage).


File format description
-----------------------

Game state will be encoded in JSON format.  The top-level format contains
up to six keys:

{
    "format":    "Atlantis transcript"
    "version":   "1.0"
    "segments":  <<SEGMENTS>>
    "players":   <<PLAYERS>>
    "turns":     <<TURNS>>
}

If the state describes a starting board only, the "turns" and "players" keys
may be omitted.

<<SEGMENTS>>

The board is described with a list of segments.  Each segment is a list of
strings, each of which contains a pair of board coordinates.  Example:

    "segments": [ ["a1","a2","b1","b2","b3","c2"],
                  ["c3","d4","d5","c4","c5"] ]

Note that all fields must be distinct across all segments (i.e. a field cannot
be part of more than one segment).  Typically, fields in a segment are
(directly or indirectly) connected, but this is not strictly required.

<<PLAYERS>>

Each player is a JSON object that contains at least a 'stacks' key, which is
an object describing all stacks of stones that a player has on the board at the
start of the game.  Each value is an integer: a positive number denotes a number
of stones on an open field, a negative number denotes a number of stones on a
growing field, and 0 indicates a dead field which used to be a growing field
for this player.

Other recommended keys: "color" (which specifies the player's color as an
SVG color name string) and "name" (which specifies the player's human-readable
name as a string). Example:

    "players": [
        {   "name":     "John"
            "color":    "red"
            "stacks":
                {   "a1":  1,
                    "a2":  0,
                    "b1": -2
                },
        },
        {   "name":     "Mary",
            "color":    "Blue",
            "stacks":
                {   "c3": 2
                    "d4": 2
                }
        }
    ]

Like segments, keys may be specified in upper case too, to denote that each of
the seven fields of the standard segment centered around the given coordinate
contains the same number of stones.

All field coordinates used as keys in the "stacks" object must be distinct across
all players, since a single field can only contain stones from a single player.
If fields are specified as seven 


<<TURNS>>

The moves performed so far are described by a list of turns.  Each turn is a
list of moves.  Each move is a list with two strings: the coordinates of the
source and destination fields.

Example:

    "turns": [
        [ ['a1','b2'],['b2','c3'],['c2','c4'] ],    /* player 1 */
        [ ],                                        /* player 2 */
        /* etc */
    ]

Note that the list of moves for a player may be empty.  The effects of the
explosion and growth phase are not described explicitly, as they follow
implicitly follow from the state of the game after performing all moves in a
turn.  The list of moves may be empty if a player cannot or does not want to
perform any moves, but it must be present.  That means that in a game with
P players, the i-th turn contains the moves executed by player i mod P.


#########################################

  OLD DATA FORMAT DESCRIPTION FOLLOWS

#########################################


The file format is text-based (when transferred in binary UTF-8 encoding should
be used). Whitespace (including spaces and newline characters) after tokens is
permitted and ignored by the parser. It is not required, but encouraged to
improve legibility.

String literals are enclosed by parentheses and may not themselves contain
embedded parentheses. If necessary, parentheses in strings should be converted
to square brackets by the processor. There currently is no escape mechanism.
String literals are the only tokens which may include whitespace characters.


Version
=======
A transcript file always starts with the text "atlantis-transcript 1.0" that
identifies the file format and specification version used (currently 1.0).

Board
=====
Next comes a description of the initial board configuration, indicated by the
'board' keyword, followed by a list of segments, optionally followed by a list
of dead fields.

Each segment is described by a standard segment identifier (e.g. 'B2') or a
sequence of single fields enclosed in square brackets (e.g. '[a1 a2 b2]'). The
segment identifier is just an abbreviation; there is no semantic difference
between B2 and [a1a2b1b2b3c2c3], nor is ordering of fields in a segment
significant. Each field may only be declared as part of one segment, and only
once per segment.

Since every field is part of a segment, the list of segments suffices to
describe all fields that exist in the game.

If the initial board contains dead fields, a dash character follows the segment
list, and then a sequence of dead fields. Each dead field must exist and may
only be declared once. Again, the order in which dead fields are specified does
not matter.

Example:

    board B1 E3 D5
    A board with three segments.

    board [a1a2 b1b2b3 c2c3] D5 E3 - e6 d6
    The same board, but with two craters on the second segment.

Players
=======
For each player, there is a player description starting with a 'player' token,
followed by the initial placement of stones, the color of his stones, and his
name.

The placement is a sequence of segments and/or fields. Each field may be
suffixed with a semicolon and a positive integer indicating the height of the
pile of stones on that field; the default is 1.

The stone color is specified as a string, which must be one of the SVG colors
names; see http://www.w3.org/TR/SVG/types.html#ColorKeywords.

The player's name is a string, and may include an e-mail address if it is known.

Stones can be placed only on existing fields that do not yet contain any stones.
Therefore, each field can only be used once in the placements of all players.

Example:
    player B2 d2:2 e3 (Joe <joe@example.com>) (red)

    Declares a player named Joe, playing with red stones, with one placed on
    each of the seven fields of segment B2, two on the field d2, and one on the
    field e3.

 + growing points?

Rounds
======

In every round (except possibly the last) each player performs exactly one turn.
Each turn consists of a sequence of moves (the order of which is significant).

Each round is prefixed by the round number (starting from 1) followed by a
period token. Each turn is suffixed with a period token as well. At the end of
each turn, before the period, a string can be inserted, which serves as a
comment for this turn.

Each move is described by two fields seperated by a dash token. Each move must
be valid according to the game rules. If a player decides not to perform any
move in a turn, this is represented by a 'pass' token.

Example:
    1. c2-c3. pass. d5-d4 d6-d7.
    2. c3-a1.

In this example, the first player first makes one move, the second player
passes, and the third player makes two moves in his first turn. In the second
round, the first player again makes one move. The second player is next to move.


Complete syntax and grammar
---------------------------

Complex tokens as regular expressions:

SEGMENT         : [A-Z]+[0-9]+
FIELD           : [a-z]+[0-9]+
STRING          : "[^"\]*((\\|\")[^"\]*)*"

Complete grammar in BNF + simple tokens + regular expressions:

Start           : Header Board Player* Round*
Header          : "atlantis-transcript 1.0"
Board           : "board" Segment+ Craters?
Segment         : SEGMENT | '[' FIELD+ ']
Craters         : '-' FIELD+
Player          : "player" Placement+ STRING STRING
Placement       : SEGMENT | FIELD (':' INT)?
Round           : INT '.' (Turn '.')+
Turn            : (PASS | Move+) STRING?
Move            : FIELD '-' FIELD

EOF
